#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è React –∏–º–ø–æ—Ä—Ç–∞ –≤ JSX —Ñ–∞–π–ª—ã
function addReactImport(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç React –∏–º–ø–æ—Ä—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (content.includes("import React") || content.includes("import * as React")) {
      return false;
    }
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç JSX, –¥–æ–±–∞–≤–ª—è–µ–º React –∏–º–ø–æ—Ä—Ç
    if (content.includes('jsx') || content.includes('JSX') || content.includes('<')) {
      const lines = content.split('\n');
      const importIndex = lines.findIndex(line => line.startsWith('import'));
      
      if (importIndex === -1) {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        lines.unshift("import React from 'react';");
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        lines.splice(importIndex + 1, 0, "import React from 'react';");
      }
      
      fs.writeFileSync(filePath, lines.join('\n'));
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω React –∏–º–ø–æ—Ä—Ç –≤ ${filePath}`);
      return true;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
  }
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è CSS —Ñ–∞–π–ª–æ–≤
function fixCSSFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å @tailwind
    if (!content.trim().startsWith('@tailwind')) {
      const fixedContent = `@tailwind base;
@tailwind components;
@tailwind utilities;

${content}`;
      
      fs.writeFileSync(filePath, fixedContent);
      console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω CSS —Ñ–∞–π–ª ${filePath}`);
      return true;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSS ${filePath}:`, error.message);
  }
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
function processDirectory(dirPath) {
  const files = fs.readdirSync(dirPath);
  
  files.forEach(file => {
    const filePath = path.join(dirPath, file);
    const stat = fs.statSync(filePath);
    
    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {
      processDirectory(filePath);
    } else if (stat.isFile()) {
      if (file.endsWith('.tsx') || file.endsWith('.jsx')) {
        addReactImport(filePath);
      } else if (file.endsWith('.css') && file.includes('index.css')) {
        fixCSSFile(filePath);
      }
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ª–∏–Ω—Ç–µ—Ä–∞...');
  
  const directories = [
    'apps/telega-interface/src',
    'apps/telega-studio/src',
    'frontend/src',
    'backend/gateway/src',
    'backend/services'
  ];
  
  directories.forEach(dir => {
    if (fs.existsSync(dir)) {
      console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${dir}`);
      processDirectory(dir);
    }
  });
  
  console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

if (require.main === module) {
  main();
}

module.exports = { addReactImport, fixCSSFile, processDirectory }; 