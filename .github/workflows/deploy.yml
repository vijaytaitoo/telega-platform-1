name: Deploy to Kubernetes

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run linting
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Gateway image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/gateway
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Interface image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/telega-interface
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/interface:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Studio image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/telega-studio
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/studio:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Telegram Service image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/services/telegram-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/telegram-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Auth Service image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/services/auth-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Payment Service image
        uses: docker/build-push-action@v5
        with:
          context: ./backend/services/payment-service
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Mass Mailer image
        uses: docker/build-push-action@v5
        with:
          context: ./mass-mailer
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mass-mailer:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig.yaml
          export KUBECONFIG=kubeconfig.yaml

      - name: Create namespace
        run: |
          kubectl create namespace telega --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply secrets
        run: |
          kubectl apply -f k8s/secrets.yaml -n telega

      - name: Deploy with Helm
        run: |
          helm upgrade --install telega ./helm \
            --namespace telega \
            --set global.imageRegistry=${{ env.REGISTRY }} \
            --set global.imageRepository=${{ env.IMAGE_NAME }} \
            --set gateway.image.tag=${{ github.sha }} \
            --set interface.image.tag=${{ github.sha }} \
            --set studio.image.tag=${{ github.sha }} \
            --set telegramService.image.tag=${{ github.sha }} \
            --set authService.image.tag=${{ github.sha }} \
            --set paymentService.image.tag=${{ github.sha }} \
            --set massMailer.image.tag=${{ github.sha }} \
            --wait --timeout=10m

      - name: Verify deployment
        run: |
          kubectl get pods -n telega
          kubectl get services -n telega
          kubectl get ingress -n telega

      - name: Notify Telegram on success
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_DEPLOY_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_DEPLOY_BOT_TOKEN }}
          message: |
            ‚úÖ Tele‚Ä¢Ga —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω!
            
            üöÄ –ö–æ–º–º–∏—Ç: `${{ github.sha }}`
            üë§ –ê–≤—Ç–æ—Ä: ${{ github.actor }}
            üìÖ –í—Ä–µ–º—è: ${{ github.event.head_commit.timestamp }}
            
            üîó –°—Å—ã–ª–∫–∏:
            ‚Ä¢ API: https://api.telega.uz
            ‚Ä¢ Shop: https://shop.telega.uz  
            ‚Ä¢ Studio: https://studio.telega.uz
            
            üìä –°—Ç–∞—Ç—É—Å: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Notify Telegram on failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_DEPLOY_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_DEPLOY_BOT_TOKEN }}
          message: |
            ‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è Tele‚Ä¢Ga!
            
            üö® –ö–æ–º–º–∏—Ç: `${{ github.sha }}`
            üë§ –ê–≤—Ç–æ—Ä: ${{ github.actor }}
            
            üîó –õ–æ–≥–∏: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ 