import { Injectable } from '@nestjs/common';
import axios from 'axios';

interface Product {
  id: string;
  title: string;
  price: number;
  image: string;
  description: string;
}

@Injectable()
export class MessageService {
  private formatProductMessage(product: Product): string {
    return `
üì¶ ${product.title}

üí∞ –¶–µ–Ω–∞: ${product.price.toLocaleString()} ‚ÇΩ

üìù ${product.description}
    `;
  }

  async sendProductCard(token: string, chatId: number, product: Product) {
    const telegramUrl = `https://api.telegram.org/bot${token}/sendPhoto`;

    try {
      const response = await axios.post(telegramUrl, {
        chat_id: chatId,
        photo: product.image,
        caption: this.formatProductMessage(product),
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üõç –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
                callback_data: `add_to_cart:${product.id}`,
              },
            ],
            [
              {
                text: 'üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                url: `https://your-domain.com/product/${product.id}`,
              },
            ],
          ],
        },
      });

      return response.data;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: ${error.message}`);
    }
  }

  async sendOrderConfirmation(token: string, chatId: number, orderId: string) {
    const telegramUrl = `https://api.telegram.org/bot${token}/sendMessage`;

    try {
      const response = await axios.post(telegramUrl, {
        chat_id: chatId,
        text: `‚úÖ –ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!

–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.`,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞',
                callback_data: `view_order:${orderId}`,
              },
            ],
          ],
        },
      });

      return response.data;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${error.message}`);
    }
  }

  async sendShippingUpdate(
    token: string,
    chatId: number,
    orderId: string,
    status: string,
  ) {
    const telegramUrl = `https://api.telegram.org/bot${token}/sendMessage`;

    const statusEmoji = {
      processing: '‚öôÔ∏è',
      shipped: 'üöö',
      delivered: '‚úÖ',
      cancelled: '‚ùå',
    };

    try {
      const response = await axios.post(telegramUrl, {
        chat_id: chatId,
        text: `${statusEmoji[status]} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #${orderId}:

–°—Ç–∞—Ç—É—Å: ${status}`,
        parse_mode: 'HTML',
      });

      return response.data;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
    }
  }
}
