version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: telega-postgres
    environment:
      POSTGRES_USER: teleuser
      POSTGRES_PASSWORD: telepass
      POSTGRES_DB: teledb
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - telega-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U teleuser -d teledb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: telega-redis
    command: redis-server --appendonly yes --requirepass ""
    volumes:
      - redisdata:/data
    ports:
      - "6379:6379"
    networks:
      - telega-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: telega-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123456
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - telega-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Client (for setup)
  minio-client:
    image: minio/mc:latest
    container_name: telega-minio-client
    depends_on:
      - minio
    command: >
      sh -c "
      sleep 10 &&
      mc alias set myminio http://minio:9000 admin admin123456 &&
      mc mb myminio/telega-assets --ignore-existing &&
      mc anonymous set public myminio/telega-assets &&
      echo 'MinIO setup completed'
      "
    networks:
      - telega-network
    restart: "no"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: telega-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - telega-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - minio

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: telega-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - telega-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: telega-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123456
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3001:3000"
    networks:
      - telega-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Elasticsearch (for logs)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: telega-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - telega-network
    restart: unless-stopped

  # Kibana (for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: telega-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - telega-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

  # Filebeat (for log collection)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: telega-filebeat
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - telega-network
    restart: unless-stopped
    depends_on:
      - elasticsearch

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local
  minio-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local

networks:
  telega-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 